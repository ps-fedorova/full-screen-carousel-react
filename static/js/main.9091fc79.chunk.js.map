{"version":3,"sources":["Carousel.js","App.js","serviceWorker.js","index.js"],"names":["SliderArr","Carousel","useState","x","setX","startX","setStartX","offsetX","setOffsetX","mouseDown","setMouseDown","timer","setTimer","timerGo","setTimerGo","id","useRef","stopTimer","window","clearInterval","current","useEffect","setInterval","time","goLeft","goRight","length","handleStartMove","event","type","nativeEvent","clientX","touches","handleMove","changedTouches","handleEndMove","difference","swipeKeyboard","evt","key","addEventListener","removeEventListener","className","style","transform","transition","onMouseDown","onMouseMove","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","onMouseOut","map","item","index","marginTop","onClick","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9091fc79.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Carousel.css';\r\n\r\nconst widthOfTheSlide = 100;\r\nconst standardOfDifference = 50;\r\nconst TIMER_TIME = 1; // transition time in seconds\r\nconst SliderArr = ['Первый', 'Второй', 'Последний'];\r\n\r\nconst Carousel = () => {\r\n\r\n  const [x, setX] = useState(0);\r\n  const [startX, setStartX] = useState(0);\r\n  const [offsetX, setOffsetX] = useState(0);\r\n\r\n  const [mouseDown, setMouseDown] = useState(false);\r\n\r\n  // to enable the transition only when changing the slide\r\n  const [timer, setTimer] = useState(0);\r\n  const [timerGo, setTimerGo] = useState(false);\r\n\r\n  const id = useRef(0);\r\n\r\n  const stopTimer = () => {\r\n    window.clearInterval(id.current);\r\n  };\r\n\r\n  useEffect(() => {\r\n    id.current = window.setInterval(() => {\r\n      setTimer((time) => time - 1);\r\n    }, 1000);\r\n    return () => stopTimer();\r\n  }, [timerGo]);\r\n\r\n  // to prevent the timer from going into negative mode\r\n  useEffect(() => {\r\n    if (timer <= 0 || !timerGo) {\r\n      stopTimer();\r\n      setTimerGo(false);\r\n    }\r\n  }, [timer, timerGo]);\r\n\r\n  const goLeft = () => {\r\n    if (x < 0)\r\n      setX(x + widthOfTheSlide);\r\n      setOffsetX(0);\r\n      setTimerGo(true);\r\n      setTimer(timer + TIMER_TIME);\r\n  }\r\n\r\n  const goRight = () => {\r\n    if (x > -widthOfTheSlide * (SliderArr.length - 1))\r\n      setX(x - widthOfTheSlide);\r\n      setOffsetX(0);\r\n      setTimerGo(true);\r\n      setTimer(timer + TIMER_TIME);\r\n  }\r\n\r\n// swipe switching\r\n  const handleStartMove = (event) => {\r\n    const { type } = event;\r\n    switch(type) {\r\n      case 'mousedown':\r\n        setStartX(event.nativeEvent.clientX);\r\n        setMouseDown(true);\r\n        break;\r\n      case 'touchstart':\r\n        setStartX(event.touches[0].clientX);\r\n        break;\r\n      default:\r\n        // without it, the linter returns an error\r\n    }\r\n  };\r\n\r\n  const handleMove = (event) => {\r\n    if (event.type === 'mousemove' && mouseDown) {\r\n      setOffsetX(event.clientX - startX);\r\n    } else if (event.type === 'touchmove' && event.changedTouches) {\r\n      setOffsetX(event.changedTouches[0].clientX - startX);\r\n    }\r\n  };\r\n\r\n  const handleEndMove = (event) => {\r\n    let difference = 0;\r\n\r\n    if (event.type === 'mouseup' && mouseDown) {\r\n      difference = startX - event.clientX;\r\n      setMouseDown(false);\r\n    } else if (event.type === 'mouseout' && mouseDown) {\r\n      difference = startX - event.clientX;\r\n      setMouseDown(false);\r\n    } else if (event.type === 'touchend') {\r\n      difference = startX - event.changedTouches[0].clientX;\r\n    }\r\n\r\n    if (difference > standardOfDifference) {\r\n      goRight();\r\n    } else if (difference < -standardOfDifference) {\r\n      goLeft();\r\n    } else {\r\n      setOffsetX(0);\r\n    }\r\n  };\r\n\r\n// switching from the keyboard\r\n  function swipeKeyboard(evt) {\r\n    if (evt.key === 'ArrowRight') goRight();\r\n    if (evt.key === 'ArrowLeft') goLeft();\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', swipeKeyboard);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', swipeKeyboard);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div className=\"carousel\">\r\n\r\n      <ul className=\"carousel__list\"\r\n          style={{\r\n            transform: `translateX(calc(${x}vw + ${offsetX}px))`,\r\n            transition: timerGo ? `all ${TIMER_TIME}s ease 0s` : \"\",\r\n          }}\r\n\r\n          onMouseDown={handleStartMove}\r\n          onMouseMove={handleMove}\r\n          onMouseUp={handleEndMove}\r\n\r\n          onTouchStart={handleStartMove}\r\n          onTouchMove={handleMove}\r\n          onTouchEnd={handleEndMove}\r\n          onMouseOut={handleEndMove}\r\n      >\r\n        {\r\n          SliderArr.map((item, index) => {\r\n              return (\r\n                <li className=\"carousel__item\" key={index}>\r\n                  {item}\r\n                </li>\r\n              )\r\n            }\r\n          )}\r\n      </ul>\r\n      <div style={{ marginTop: 20 }}>{timer}</div>\r\n      <button className='button button-left' onClick={goLeft}>&larr;</button>\r\n      <button className='button button-right' onClick={goRight}>&rarr;</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Carousel;\r\n","import React from 'react';\r\n\r\nimport Slider from \"./Carousel\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Slider/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}