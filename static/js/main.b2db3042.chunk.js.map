{"version":3,"sources":["Carousel.js","App.js","serviceWorker.js","index.js"],"names":["Carousel","SliderArr","useState","x","setX","startX","setStartX","offsetX","setOffsetX","mouseDown","setMouseDown","timer","setTimer","timerGo","setTimerGo","id","useRef","clear","window","clearInterval","current","goLeft","goRight","length","React","useEffect","setInterval","time","handleStartMove","event","type","nativeEvent","clientX","touches","handleMove","changedTouches","handleEndMove","difference","swipeKeyboard","evt","key","addEventListener","removeEventListener","className","style","transform","transition","onMouseDown","onMouseMove","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","onMouseOut","map","item","index","marginTop","onClick","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2db3042.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Carousel.css';\r\n\r\nfunction Carousel() {\r\n  let SliderArr = ['Первый', 'Второй', 'Последний'];\r\n\r\n  const [x, setX] = useState(0);\r\n  const [startX, setStartX] = useState(0);\r\n  const [offsetX, setOffsetX] = useState(0);\r\n\r\n  const [mouseDown, setMouseDown] = useState(false);\r\n\r\n  const widthOfTheSlide = 100;\r\n  const standardOfDifference = 50;\r\n\r\n  // Вот эта херня нужна чтобы включать transition только при смене слайда\r\n  const [timer, setTimer] = useState(0);\r\n  const [timerGo, setTimerGo] = useState(false);\r\n\r\n  const id = useRef(0);\r\n\r\n  const TIMER_TIME = 1; // время transition в секундах\r\n\r\n  const clear = () => {\r\n    window.clearInterval(id.current);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    id.current = window.setInterval(() => {\r\n      setTimer((time) => time - 1);\r\n    }, 1000);\r\n    return () => clear();\r\n  }, [timerGo]);\r\n\r\n  // чтобы таймер не ушел в минус\r\n  React.useEffect(() => {\r\n    if (timer <= 0  || timerGo === false) {\r\n      clear();\r\n      setTimerGo(false);\r\n    }\r\n  }, [timer, timerGo]);\r\n  // Эта самая херня для transition до сюда\r\n\r\n\r\n  function goLeft() {\r\n    x < 0 &&\r\n    setX(x + widthOfTheSlide);\r\n    setOffsetX(0);\r\n    setTimerGo(true);\r\n    setTimer(timer + TIMER_TIME);\r\n  }\r\n\r\n  function goRight() {\r\n    x > -widthOfTheSlide * (SliderArr.length - 1) &&\r\n    setX(x - widthOfTheSlide);\r\n    setOffsetX(0);\r\n    setTimerGo(true);\r\n    setTimer(timer + TIMER_TIME);\r\n  }\r\n\r\n  // Переключение свайпами\r\n  const handleStartMove = (event) => {\r\n    if (event.type === 'mousedown') {\r\n      setStartX(event.nativeEvent.clientX);\r\n      setMouseDown(true);\r\n    } else if (event.type === 'touchstart') {\r\n      setStartX(event.touches[0].clientX);\r\n    }\r\n  };\r\n\r\n  const handleMove = (event) => {\r\n    if (mouseDown === true && event.type === 'mousemove') {\r\n      setOffsetX(event.clientX - startX);\r\n    } else if (event.changedTouches && event.type === 'touchmove') {\r\n      setOffsetX(event.changedTouches[0].clientX - startX);\r\n    }\r\n  };\r\n\r\n  const handleEndMove = (event) => {\r\n    let difference = 0;\r\n    if (event.type === 'mouseup' && mouseDown === true) {\r\n      difference = startX - event.clientX;\r\n      setMouseDown(false);\r\n    } else if (event.type === 'mouseout' && mouseDown === true) {\r\n      difference = startX - event.clientX;\r\n      setMouseDown(false);\r\n    } else if (event.type === 'touchend') {\r\n      difference = startX - event.changedTouches[0].clientX;\r\n    }\r\n\r\n    if (difference > standardOfDifference) {\r\n      goRight();\r\n    } else if (difference < -standardOfDifference) {\r\n      goLeft();\r\n    } else {\r\n      setOffsetX(0);\r\n    }\r\n  };\r\n\r\n  // переключение с клавиатуры\r\n  function swipeKeyboard(evt) {\r\n    if (evt.key === 'ArrowRight') goRight();\r\n    if (evt.key === 'ArrowLeft') goLeft();\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', swipeKeyboard);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', swipeKeyboard);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div className=\"carousel\">\r\n\r\n      <ul className=\"carousel__list\"\r\n          style={{\r\n            transform: `translateX(calc(${x}vw + ${offsetX}px))`,\r\n            transition: timerGo ? `all ${TIMER_TIME}s ease 0s` : \"\",\r\n          }}\r\n\r\n          onMouseDown={handleStartMove}\r\n          onMouseMove={handleMove}\r\n          onMouseUp={handleEndMove}\r\n\r\n          onTouchStart={handleStartMove}\r\n          onTouchMove={handleMove}\r\n          onTouchEnd={handleEndMove}\r\n          onMouseOut={handleEndMove}\r\n      >\r\n        {\r\n          SliderArr.map((item, index) => {\r\n              return (\r\n                <li className=\"carousel__item\" key={index}>\r\n                  {item}\r\n                </li>\r\n              )\r\n            }\r\n          )}\r\n      </ul>\r\n      <div style={{marginTop: 20}}>{timer}</div>\r\n      <button className='button button-left' onClick={goLeft}>&larr;</button>\r\n      <button className='button button-right' onClick={goRight}>&rarr;</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Carousel;\r\n","import React from 'react';\r\n\r\nimport Slider from \"./Carousel\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Slider/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}